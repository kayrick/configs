#!/usr/bin/env perl

use Time::Piece;
use Time::Local;
use Term::ANSIColor qw(:constants);
use Getopt::Std;

my $fname;
my %options;

$ok = getopts('uq', \%options);

my $quiet = $options{q};
my $update = $options{u};

my ($day, $month, $year) = (localtime())[3,4,5];
my $today = timelocal(0,0,0,$day,$month,$year);

my @tasks;

sub print_or_store
{
  my $str = $_[0];
  return if ($str =~ m/^x/);
  if ($str =~ m/due:(\d{4})-(\d{2}).(\d{2})/) {
    my $due = timelocal(0,0,0,$3,$2 - 1,$1 - 1900);
    if ($due == $today) {
      print BOLD, $_, RESET;
    } else {
      push @tasks, [$due, $_];
    }
  }
}

sub update
{
}

sub walk_file
{
  my $FILE;
  my $fname = $_[0];

  if ($fname eq "-") {
    $FILE = *STDIN;
  } else {
    open $FILE, $fname or die $!;
  }

  while(<$FILE>) {
    print_or_store $_ if (not $quiet);
    update $_ if ($update);
  }
}

sub print_tasks{
  my @sorted = sort {$a->[0] <=> $b->[0]} @tasks;

  for my $idx (0 .. $#sorted) {
    if ($sorted[$idx][0] < $today) {
      print RED, $sorted[$idx][1], RESET;
    } else {
      print GREEN, $sorted[$idx][1], RESET;
    }
  }
}

if (@ARGV == 0) {
  walk_file $ENV{'HOME'} . "/Documents/TODO/Todo.txt";
} else {
  foreach (@ARGV) {
    walk_file $_;
  }
}

print_tasks if (not $quiet);
